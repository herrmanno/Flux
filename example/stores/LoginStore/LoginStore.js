/// <reference path="../../../dist/flux.d.ts"/>
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var LoginStore = (function (_super) {
    __extends(LoginStore, _super);
    function LoginStore() {
        _super.apply(this, arguments);
    }
    LoginStore.prototype.init = function () {
        this.data = {};
    };
    LoginStore.prototype.login = function (user) {
        if (user.name === this.data.name && user.password === this.data.password)
            return;
        var found = JSON.parse(localStorage['users'] || '[]')
            .filter(function (u) {
            return u.name === user.name && u.password === user.password;
        })[0];
        if (found) {
            this.data = found;
            ho.flux.DISPATCHER.dispatch({ type: LoginStore.actions.LOGIN_SUCCES });
        }
        else {
            this.data = { error: "Username or Password is wrong!" };
            ho.flux.DISPATCHER.dispatch({ type: LoginStore.actions.LOGIN_ERROR });
        }
        this.changed();
        this.changed();
    };
    LoginStore.prototype.isLoggedIn = function () {
        return !!this.data.name;
    };
    LoginStore.actions = {
        LOGIN_SUCCES: 'LOGIN_SUCCES',
        LOGIN_ERROR: 'LOGIN_ERROR'
    };
    return LoginStore;
})(ho.flux.Store);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9naW5TdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxvZ2luU3RvcmUudHMiXSwibmFtZXMiOlsiTG9naW5TdG9yZSIsIkxvZ2luU3RvcmUuY29uc3RydWN0b3IiLCJMb2dpblN0b3JlLmluaXQiLCJMb2dpblN0b3JlLmxvZ2luIiwiTG9naW5TdG9yZS5pc0xvZ2dlZEluIl0sIm1hcHBpbmdzIjoiQUFBQSwrQ0FBK0M7Ozs7OztBQU0vQztJQUF5QkEsOEJBQTZCQTtJQUF0REE7UUFBeUJDLDhCQUE2QkE7SUF3Q3REQSxDQUFDQTtJQWhDQUQseUJBQUlBLEdBQUpBO1FBQ0NFLElBQUlBLENBQUNBLElBQUlBLEdBQW1CQSxFQUFFQSxDQUFDQTtJQUNoQ0EsQ0FBQ0E7SUFFREYsMEJBQUtBLEdBQUxBLFVBQU1BLElBQVdBO1FBQ2hCRyxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxLQUFLQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxRQUFRQSxLQUFLQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtZQUN2RUEsTUFBTUEsQ0FBQ0E7UUFFUkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7YUFDcERBLE1BQU1BLENBQUNBLFVBQUNBLENBQUNBO1lBQ1RBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEtBQUtBLElBQUlBLENBQUNBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLFFBQVFBLEtBQUtBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1FBQzdEQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVOQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNWQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUNsQkEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBQ0EsSUFBSUEsRUFBRUEsVUFBVUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsWUFBWUEsRUFBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEVBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1BBLElBQUlBLENBQUNBLElBQUlBLEdBQW1CQSxFQUFDQSxLQUFLQSxFQUFFQSxnQ0FBZ0NBLEVBQUNBLENBQUNBO1lBQ3RFQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxFQUFDQSxJQUFJQSxFQUFFQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxFQUFDQSxDQUFDQSxDQUFDQTtRQUNyRUEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFFZkEsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFFaEJBLENBQUNBO0lBRURILCtCQUFVQSxHQUFWQTtRQUNDSSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFsQ01KLGtCQUFPQSxHQUFHQTtRQUNoQkEsWUFBWUEsRUFBRUEsY0FBY0E7UUFDNUJBLFdBQVdBLEVBQUVBLGFBQWFBO0tBQzFCQSxDQUFBQTtJQW1DRkEsaUJBQUNBO0FBQURBLENBQUNBLEFBeENELEVBQXlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQXdDckMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vZGlzdC9mbHV4LmQudHNcIi8+XHJcblxyXG5pbnRlcmZhY2UgTG9naW5TdG9yZURhdGEgZXh0ZW5kcyBJVXNlciB7XHJcblx0ZXJyb3I6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgTG9naW5TdG9yZSBleHRlbmRzIGhvLmZsdXguU3RvcmU8TG9naW5TdG9yZURhdGE+IHtcclxuXHJcblx0c3RhdGljIGFjdGlvbnMgPSB7XHJcblx0XHRMT0dJTl9TVUNDRVM6ICdMT0dJTl9TVUNDRVMnLFxyXG5cdFx0TE9HSU5fRVJST1I6ICdMT0dJTl9FUlJPUidcclxuXHR9XHJcblxyXG5cclxuXHRpbml0KCkge1xyXG5cdFx0dGhpcy5kYXRhID0gPExvZ2luU3RvcmVEYXRhPnt9O1xyXG5cdH1cclxuXHJcblx0bG9naW4odXNlcjogSVVzZXIpOiB2b2lkIHtcclxuXHRcdGlmKHVzZXIubmFtZSA9PT0gdGhpcy5kYXRhLm5hbWUgJiYgdXNlci5wYXNzd29yZCA9PT0gdGhpcy5kYXRhLnBhc3N3b3JkKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0bGV0IGZvdW5kID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VbJ3VzZXJzJ10gfHwgJ1tdJylcclxuXHRcdC5maWx0ZXIoKHUpID0+IHtcclxuXHRcdFx0cmV0dXJuIHUubmFtZSA9PT0gdXNlci5uYW1lICYmIHUucGFzc3dvcmQgPT09IHVzZXIucGFzc3dvcmQ7XHJcblx0XHR9KVswXTtcclxuXHJcblx0XHRpZihmb3VuZCkge1xyXG5cdFx0XHR0aGlzLmRhdGEgPSBmb3VuZDtcclxuXHRcdFx0aG8uZmx1eC5ESVNQQVRDSEVSLmRpc3BhdGNoKHt0eXBlOiBMb2dpblN0b3JlLmFjdGlvbnMuTE9HSU5fU1VDQ0VTfSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmRhdGEgPSA8TG9naW5TdG9yZURhdGE+e2Vycm9yOiBcIlVzZXJuYW1lIG9yIFBhc3N3b3JkIGlzIHdyb25nIVwifTtcclxuXHRcdFx0aG8uZmx1eC5ESVNQQVRDSEVSLmRpc3BhdGNoKHt0eXBlOiBMb2dpblN0b3JlLmFjdGlvbnMuTE9HSU5fRVJST1J9KTtcclxuXHRcdH1cclxuXHRcdHRoaXMuY2hhbmdlZCgpO1xyXG5cclxuXHRcdHRoaXMuY2hhbmdlZCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlzTG9nZ2VkSW4oKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gISF0aGlzLmRhdGEubmFtZTtcclxuXHR9XHJcblxyXG5cclxuXHJcbn1cclxuIl19